// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user_lectures_queries.sql

package gendb

import (
	"context"

	"github.com/TulgaCG/add-drop-classes-api/pkg/types"
	"github.com/jackc/pgx/v5/pgtype"
)

const addLectureToUser = `-- name: AddLectureToUser :one
INSERT INTO user_lectures ( user_id, lecture_id ) VALUES ( $1, $2 ) RETURNING user_id, lecture_id
`

type AddLectureToUserParams struct {
	UserID    types.UserID    `db:"user_id" json:"userId"`
	LectureID types.LectureID `db:"lecture_id" json:"lectureId"`
}

type AddLectureToUserRow struct {
	UserID    types.UserID    `db:"user_id" json:"userId"`
	LectureID types.LectureID `db:"lecture_id" json:"lectureId"`
}

func (q *Queries) AddLectureToUser(ctx context.Context, arg AddLectureToUserParams) (AddLectureToUserRow, error) {
	row := q.db.QueryRow(ctx, addLectureToUser, arg.UserID, arg.LectureID)
	var i AddLectureToUserRow
	err := row.Scan(&i.UserID, &i.LectureID)
	return i, err
}

const getUserLectures = `-- name: GetUserLectures :many
SELECT l.name, l.code, l.credit, l.type
FROM users u
JOIN user_lectures ul ON u.id = ul.user_id
JOIN lectures l ON ul.lecture_id = l.id
WHERE u.id = $1
`

type GetUserLecturesRow struct {
	Name   string      `db:"name" json:"name"`
	Code   string      `db:"code" json:"code"`
	Credit int16       `db:"credit" json:"credit"`
	Type   pgtype.Int2 `db:"type" json:"type"`
}

func (q *Queries) GetUserLectures(ctx context.Context, id types.UserID) ([]GetUserLecturesRow, error) {
	rows, err := q.db.Query(ctx, getUserLectures, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserLecturesRow
	for rows.Next() {
		var i GetUserLecturesRow
		if err := rows.Scan(
			&i.Name,
			&i.Code,
			&i.Credit,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeLectureFromUser = `-- name: RemoveLectureFromUser :execrows
DELETE FROM user_lectures WHERE user_id = $1 AND lecture_id = $2
`

type RemoveLectureFromUserParams struct {
	UserID    types.UserID    `db:"user_id" json:"userId"`
	LectureID types.LectureID `db:"lecture_id" json:"lectureId"`
}

func (q *Queries) RemoveLectureFromUser(ctx context.Context, arg RemoveLectureFromUserParams) (int64, error) {
	result, err := q.db.Exec(ctx, removeLectureFromUser, arg.UserID, arg.LectureID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
