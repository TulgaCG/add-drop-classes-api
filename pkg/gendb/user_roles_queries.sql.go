// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user_roles_queries.sql

package gendb

import (
	"context"

	"github.com/TulgaCG/add-drop-classes-api/pkg/types"
)

const addRoleToUser = `-- name: AddRoleToUser :one
INSERT INTO user_roles (user_id, role_id) VALUES (
    ?, ?
) RETURNING id, user_id, role_id
`

type AddRoleToUserParams struct {
	UserID types.UserID `db:"user_id" json:"userId"`
	RoleID int64        `db:"role_id" json:"roleId"`
}

func (q *Queries) AddRoleToUser(ctx context.Context, arg AddRoleToUserParams) (UserRole, error) {
	row := q.db.QueryRowContext(ctx, addRoleToUser, arg.UserID, arg.RoleID)
	var i UserRole
	err := row.Scan(&i.ID, &i.UserID, &i.RoleID)
	return i, err
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT r.role
FROM users u
JOIN user_roles ur ON u.id = ur.user_id
JOIN roles r ON ur.role_id = r.id
WHERE u.id = ?
`

func (q *Queries) GetUserRoles(ctx context.Context, id types.UserID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUserRoles, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var role string
		if err := rows.Scan(&role); err != nil {
			return nil, err
		}
		items = append(items, role)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeRoleFromUser = `-- name: RemoveRoleFromUser :exec
DELETE FROM user_roles WHERE user_id = ? AND role_id = ?
`

type RemoveRoleFromUserParams struct {
	UserID types.UserID `db:"user_id" json:"userId"`
	RoleID int64        `db:"role_id" json:"roleId"`
}

func (q *Queries) RemoveRoleFromUser(ctx context.Context, arg RemoveRoleFromUserParams) error {
	_, err := q.db.ExecContext(ctx, removeRoleFromUser, arg.UserID, arg.RoleID)
	return err
}
