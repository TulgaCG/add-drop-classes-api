// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user_queries.sql

package gendb

import (
	"context"

	"github.com/TulgaCG/add-drop-classes-api/pkg/types"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, password
) VALUES (
    $1, $2
)
RETURNING id, username
`

type CreateUserParams struct {
	Username string `db:"username" json:"username"`
	Password string `db:"password" json:"password"`
}

type CreateUserRow struct {
	ID       types.UserID `db:"id" json:"id"`
	Username string       `db:"username" json:"username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username FROM users
WHERE id = $1 LIMIT 1
`

type GetUserRow struct {
	ID       types.UserID `db:"id" json:"id"`
	Username string       `db:"username" json:"username"`
}

func (q *Queries) GetUser(ctx context.Context, id types.UserID) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username FROM users
WHERE username = $1 LIMIT 1
`

type GetUserByUsernameRow struct {
	ID       types.UserID `db:"id" json:"id"`
	Username string       `db:"username" json:"username"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const getUserCredentialsWithUsername = `-- name: GetUserCredentialsWithUsername :one
SELECT id, username, password, token, token_expire_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserCredentialsWithUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserCredentialsWithUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Token,
		&i.TokenExpireAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username FROM users
ORDER BY username
`

type ListUsersRow struct {
	ID       types.UserID `db:"id" json:"id"`
	Username string       `db:"username" json:"username"`
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const testDeleteUser = `-- name: TestDeleteUser :exec
DELETE FROM users
WHERE username = $1
`

func (q *Queries) TestDeleteUser(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, testDeleteUser, username)
	return err
}

const updateToken = `-- name: UpdateToken :one
UPDATE users
set token = $1,
    token_expire_at = $2
WHERE id = $3
RETURNING username, token
`

type UpdateTokenParams struct {
	Token         pgtype.Text      `db:"token" json:"token"`
	TokenExpireAt pgtype.Timestamp `db:"token_expire_at" json:"tokenExpireAt"`
	ID            types.UserID     `db:"id" json:"id"`
}

type UpdateTokenRow struct {
	Username string      `db:"username" json:"username"`
	Token    pgtype.Text `db:"token" json:"token"`
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) (UpdateTokenRow, error) {
	row := q.db.QueryRow(ctx, updateToken, arg.Token, arg.TokenExpireAt, arg.ID)
	var i UpdateTokenRow
	err := row.Scan(&i.Username, &i.Token)
	return i, err
}

const updateTokenExpirationDate = `-- name: UpdateTokenExpirationDate :exec
UPDATE users
set token_expire_at = $1
WHERE id = $2
`

type UpdateTokenExpirationDateParams struct {
	TokenExpireAt pgtype.Timestamp `db:"token_expire_at" json:"tokenExpireAt"`
	ID            types.UserID     `db:"id" json:"id"`
}

func (q *Queries) UpdateTokenExpirationDate(ctx context.Context, arg UpdateTokenExpirationDateParams) error {
	_, err := q.db.Exec(ctx, updateTokenExpirationDate, arg.TokenExpireAt, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
set username = $1,
password = $2
WHERE id = $3
RETURNING id, username
`

type UpdateUserParams struct {
	Username string       `db:"username" json:"username"`
	Password string       `db:"password" json:"password"`
	ID       types.UserID `db:"id" json:"id"`
}

type UpdateUserRow struct {
	ID       types.UserID `db:"id" json:"id"`
	Username string       `db:"username" json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Username, arg.Password, arg.ID)
	var i UpdateUserRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}
