// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: role_queries.sql

package gendb

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles(role)
VALUES (?)
RETURNING role
`

func (q *Queries) CreateRole(ctx context.Context, role string) (string, error) {
	row := q.db.QueryRowContext(ctx, createRole, role)
	err := row.Scan(&role)
	return role, err
}

const deleteRoleByID = `-- name: DeleteRoleByID :exec
DELETE FROM roles WHERE id = ?
`

func (q *Queries) DeleteRoleByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRoleByID, id)
	return err
}

const deleteRoleByName = `-- name: DeleteRoleByName :exec
DELETE FROM roles WHERE role = ?
`

func (q *Queries) DeleteRoleByName(ctx context.Context, role string) error {
	_, err := q.db.ExecContext(ctx, deleteRoleByName, role)
	return err
}

const getRoleName = `-- name: GetRoleName :one
SELECT role FROM roles
WHERE id = ?
`

func (q *Queries) GetRoleName(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getRoleName, id)
	var role string
	err := row.Scan(&role)
	return role, err
}
