// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: role_queries.sql

package gendb

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (role) VALUES (?)
RETURNING id, role
`

func (q *Queries) CreateRole(ctx context.Context, role string) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, role)
	var i Role
	err := row.Scan(&i.ID, &i.Role)
	return i, err
}

const deleteRole = `-- name: DeleteRole :execrows
DELETE FROM roles WHERE role = ?
`

func (q *Queries) DeleteRole(ctx context.Context, role string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteRole, role)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, role FROM roles WHERE role = ?
`

func (q *Queries) GetRoleByName(ctx context.Context, role string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByName, role)
	var i Role
	err := row.Scan(&i.ID, &i.Role)
	return i, err
}
