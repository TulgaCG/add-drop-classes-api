// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user_role_queries.sql

package gendb

import (
	"context"

	"github.com/TulgaCG/add-drop-classes-api/pkg/types"
)

const createUserRole = `-- name: CreateUserRole :exec
INSERT INTO user_roles (user_id, role_id) 
VALUES (?, ?)
`

type CreateUserRoleParams struct {
	UserID types.UserID `db:"user_id" json:"userId"`
	RoleID types.RoleID `db:"role_id" json:"roleId"`
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, createUserRole, arg.UserID, arg.RoleID)
	return err
}

const deleteUserRole = `-- name: DeleteUserRole :execrows
DELETE FROM user_roles
WHERE user_id = ?
AND role_id = ?
`

type DeleteUserRoleParams struct {
	UserID types.UserID `db:"user_id" json:"userId"`
	RoleID types.RoleID `db:"role_id" json:"roleId"`
}

func (q *Queries) DeleteUserRole(ctx context.Context, arg DeleteUserRoleParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteUserRole, arg.UserID, arg.RoleID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getUserRole = `-- name: GetUserRole :many
SELECT r.role
FROM users u
JOIN user_roles ur ON u.id = ur.user_id
JOIN roles r ON ur.role_id = r.id
WHERE u.id = ?
`

func (q *Queries) GetUserRole(ctx context.Context, id types.UserID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUserRole, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var role string
		if err := rows.Scan(&role); err != nil {
			return nil, err
		}
		items = append(items, role)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
